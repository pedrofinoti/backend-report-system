const express = require('express');
const mongoose = require('mongoose');
const multer = require('multer');
const path = require('path');
const fs = require('fs');
const pdfkit = require('pdfkit');

const app = express();
const PORT = process.env.PORT || 5000;

// Configuração do Multer para upload de imagens
const storage = multer.diskStorage({
    destination: './uploads/',
    filename: (req, file, cb) => {
        cb(null, `${Date.now()}-${file.originalname}`);
    }
});
const upload = multer({ storage });

// Conectar ao MongoDB
mongoose.connect('mongodb://localhost:27017/reports', {
    useNewUrlParser: true,
    useUnifiedTopology: true
});

const ReportSchema = new mongoose.Schema({
    name: String,
    description: String,
    image: String,
    date: { type: Date, default: Date.now }
});
const Report = mongoose.model('Report', ReportSchema);

app.use(express.json());
app.use('/uploads', express.static(path.join(__dirname, 'uploads')));

// Rota para envio de dados e upload de foto
app.post('/upload', upload.single('image'), async (req, res) => {
    try {
        const { name, description } = req.body;
        const imagePath = req.file ? req.file.path : '';
        
        const report = new Report({ name, description, image: imagePath });
        await report.save();

        res.status(201).json({ message: 'Dados salvos com sucesso!', report });
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// Rota para gerar relatório em PDF
app.get('/generate-pdf/:id', async (req, res) => {
    try {
        const report = await Report.findById(req.params.id);
        if (!report) return res.status(404).send('Relatório não encontrado');
        
        const pdf = new pdfkit();
        const pdfPath = `./reports/${report._id}.pdf`;
        const writeStream = fs.createWriteStream(pdfPath);
        
        pdf.pipe(writeStream);
        pdf.text(`Relatório: ${report.name}`, { align: 'center' });
        pdf.text(`Descrição: ${report.description}`);
        pdf.text(`Data: ${report.date.toDateString()}`);
        
        if (report.image) {
            pdf.image(report.image, { width: 300 });
        }
        
        pdf.end();

        writeStream.on('finish', () => {
            res.download(pdfPath);
        });
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

app.listen(PORT, () => {
    console.log(`Servidor rodando na porta ${PORT}`);
});
